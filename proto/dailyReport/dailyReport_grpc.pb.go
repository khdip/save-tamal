// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/dailyReport/dailyReport.proto

package dailyReport

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DailyReportService_CreateDailyReport_FullMethodName = "/dailyreport.DailyReportService/CreateDailyReport"
	DailyReportService_GetDailyReport_FullMethodName    = "/dailyreport.DailyReportService/GetDailyReport"
	DailyReportService_UpdateDailyReport_FullMethodName = "/dailyreport.DailyReportService/UpdateDailyReport"
	DailyReportService_DeleteDailyReport_FullMethodName = "/dailyreport.DailyReportService/DeleteDailyReport"
	DailyReportService_ListDailyReport_FullMethodName   = "/dailyreport.DailyReportService/ListDailyReport"
	DailyReportService_DailyReportStats_FullMethodName  = "/dailyreport.DailyReportService/DailyReportStats"
)

// DailyReportServiceClient is the client API for DailyReportService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DailyReportServiceClient interface {
	CreateDailyReport(ctx context.Context, in *CreateDailyReportRequest, opts ...grpc.CallOption) (*CreateDailyReportResponse, error)
	GetDailyReport(ctx context.Context, in *GetDailyReportRequest, opts ...grpc.CallOption) (*GetDailyReportResponse, error)
	UpdateDailyReport(ctx context.Context, in *UpdateDailyReportRequest, opts ...grpc.CallOption) (*UpdateDailyReportResponse, error)
	DeleteDailyReport(ctx context.Context, in *DeleteDailyReportRequest, opts ...grpc.CallOption) (*DeleteDailyReportResponse, error)
	ListDailyReport(ctx context.Context, in *ListDailyReportRequest, opts ...grpc.CallOption) (*ListDailyReportResponse, error)
	DailyReportStats(ctx context.Context, in *DailyReportStatsRequest, opts ...grpc.CallOption) (*DailyReportStatsResponse, error)
}

type dailyReportServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDailyReportServiceClient(cc grpc.ClientConnInterface) DailyReportServiceClient {
	return &dailyReportServiceClient{cc}
}

func (c *dailyReportServiceClient) CreateDailyReport(ctx context.Context, in *CreateDailyReportRequest, opts ...grpc.CallOption) (*CreateDailyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDailyReportResponse)
	err := c.cc.Invoke(ctx, DailyReportService_CreateDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyReportServiceClient) GetDailyReport(ctx context.Context, in *GetDailyReportRequest, opts ...grpc.CallOption) (*GetDailyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDailyReportResponse)
	err := c.cc.Invoke(ctx, DailyReportService_GetDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyReportServiceClient) UpdateDailyReport(ctx context.Context, in *UpdateDailyReportRequest, opts ...grpc.CallOption) (*UpdateDailyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDailyReportResponse)
	err := c.cc.Invoke(ctx, DailyReportService_UpdateDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyReportServiceClient) DeleteDailyReport(ctx context.Context, in *DeleteDailyReportRequest, opts ...grpc.CallOption) (*DeleteDailyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDailyReportResponse)
	err := c.cc.Invoke(ctx, DailyReportService_DeleteDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyReportServiceClient) ListDailyReport(ctx context.Context, in *ListDailyReportRequest, opts ...grpc.CallOption) (*ListDailyReportResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDailyReportResponse)
	err := c.cc.Invoke(ctx, DailyReportService_ListDailyReport_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dailyReportServiceClient) DailyReportStats(ctx context.Context, in *DailyReportStatsRequest, opts ...grpc.CallOption) (*DailyReportStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DailyReportStatsResponse)
	err := c.cc.Invoke(ctx, DailyReportService_DailyReportStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DailyReportServiceServer is the server API for DailyReportService service.
// All implementations must embed UnimplementedDailyReportServiceServer
// for forward compatibility.
type DailyReportServiceServer interface {
	CreateDailyReport(context.Context, *CreateDailyReportRequest) (*CreateDailyReportResponse, error)
	GetDailyReport(context.Context, *GetDailyReportRequest) (*GetDailyReportResponse, error)
	UpdateDailyReport(context.Context, *UpdateDailyReportRequest) (*UpdateDailyReportResponse, error)
	DeleteDailyReport(context.Context, *DeleteDailyReportRequest) (*DeleteDailyReportResponse, error)
	ListDailyReport(context.Context, *ListDailyReportRequest) (*ListDailyReportResponse, error)
	DailyReportStats(context.Context, *DailyReportStatsRequest) (*DailyReportStatsResponse, error)
	mustEmbedUnimplementedDailyReportServiceServer()
}

// UnimplementedDailyReportServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDailyReportServiceServer struct{}

func (UnimplementedDailyReportServiceServer) CreateDailyReport(context.Context, *CreateDailyReportRequest) (*CreateDailyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDailyReport not implemented")
}
func (UnimplementedDailyReportServiceServer) GetDailyReport(context.Context, *GetDailyReportRequest) (*GetDailyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyReport not implemented")
}
func (UnimplementedDailyReportServiceServer) UpdateDailyReport(context.Context, *UpdateDailyReportRequest) (*UpdateDailyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDailyReport not implemented")
}
func (UnimplementedDailyReportServiceServer) DeleteDailyReport(context.Context, *DeleteDailyReportRequest) (*DeleteDailyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDailyReport not implemented")
}
func (UnimplementedDailyReportServiceServer) ListDailyReport(context.Context, *ListDailyReportRequest) (*ListDailyReportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDailyReport not implemented")
}
func (UnimplementedDailyReportServiceServer) DailyReportStats(context.Context, *DailyReportStatsRequest) (*DailyReportStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DailyReportStats not implemented")
}
func (UnimplementedDailyReportServiceServer) mustEmbedUnimplementedDailyReportServiceServer() {}
func (UnimplementedDailyReportServiceServer) testEmbeddedByValue()                            {}

// UnsafeDailyReportServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DailyReportServiceServer will
// result in compilation errors.
type UnsafeDailyReportServiceServer interface {
	mustEmbedUnimplementedDailyReportServiceServer()
}

func RegisterDailyReportServiceServer(s grpc.ServiceRegistrar, srv DailyReportServiceServer) {
	// If the following call pancis, it indicates UnimplementedDailyReportServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DailyReportService_ServiceDesc, srv)
}

func _DailyReportService_CreateDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDailyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyReportServiceServer).CreateDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyReportService_CreateDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyReportServiceServer).CreateDailyReport(ctx, req.(*CreateDailyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyReportService_GetDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyReportServiceServer).GetDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyReportService_GetDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyReportServiceServer).GetDailyReport(ctx, req.(*GetDailyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyReportService_UpdateDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDailyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyReportServiceServer).UpdateDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyReportService_UpdateDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyReportServiceServer).UpdateDailyReport(ctx, req.(*UpdateDailyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyReportService_DeleteDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDailyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyReportServiceServer).DeleteDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyReportService_DeleteDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyReportServiceServer).DeleteDailyReport(ctx, req.(*DeleteDailyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyReportService_ListDailyReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDailyReportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyReportServiceServer).ListDailyReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyReportService_ListDailyReport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyReportServiceServer).ListDailyReport(ctx, req.(*ListDailyReportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DailyReportService_DailyReportStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DailyReportStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DailyReportServiceServer).DailyReportStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DailyReportService_DailyReportStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DailyReportServiceServer).DailyReportStats(ctx, req.(*DailyReportStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DailyReportService_ServiceDesc is the grpc.ServiceDesc for DailyReportService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DailyReportService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dailyreport.DailyReportService",
	HandlerType: (*DailyReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDailyReport",
			Handler:    _DailyReportService_CreateDailyReport_Handler,
		},
		{
			MethodName: "GetDailyReport",
			Handler:    _DailyReportService_GetDailyReport_Handler,
		},
		{
			MethodName: "UpdateDailyReport",
			Handler:    _DailyReportService_UpdateDailyReport_Handler,
		},
		{
			MethodName: "DeleteDailyReport",
			Handler:    _DailyReportService_DeleteDailyReport_Handler,
		},
		{
			MethodName: "ListDailyReport",
			Handler:    _DailyReportService_ListDailyReport_Handler,
		},
		{
			MethodName: "DailyReportStats",
			Handler:    _DailyReportService_DailyReportStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dailyReport/dailyReport.proto",
}
